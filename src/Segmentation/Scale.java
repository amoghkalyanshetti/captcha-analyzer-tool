/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Segmentation;


import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.PixelGrabber;

public class Scale {
    
    Image img;
    BufferedImage[] images;
    int w,h,Top,Bottom,Left,Right;
    int pixelMap[];
  
    
     public Scale(BufferedImage[] imgs)
    {
        this.images=imgs;   
    }

    public Scale() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public void getPixels(int i)
    {
         
        try
        {
            PixelGrabber pg = new PixelGrabber(images[i], 0, 0, w, h,pixelMap, 0,w);
            pg.grabPixels();
        }

        catch (Exception e)
        {
           // System.out.println("Exception generated by grabPixel()");
            
        }
     
      /* for(int i=0;i<w*h;i++)
                 System.out.println(pixelMap[i]);*/
            
    }
    
    
    public boolean hLineClear(int y)    
    {
       //  -1 = white
       //  -16777216 = black
        for ( int i=0;i<w;i++ ) 
        {
            if ( pixelMap[(y*w)+i] !=-1)  
            return false;   // if black
        }
        return true;    // if white
    }
    
    
    public boolean vLineClear(int x)
    {
        for ( int i=0;i<h;i++ ) 
        {
            if ( pixelMap[(i*w)+x] !=-1)
            return false;
        }
     return true;
    }
    
    public void findBounds()
    {
     // top line
    for ( int y=0;y<h;y++ ) {
        if ( !hLineClear(y) ) {
        Top=y;
        break;
        }
    }
     // bottom line
    for ( int y=h-1;y>=0;y-- ) {
        if ( !hLineClear(y) ) {
        Bottom=y;
        break;
        }
    }
     // left line
    for ( int x=0;x<w;x++ ) {
        if ( !vLineClear(x) ) {
        Left = x;
        break;
        }
    }
     // right line
    for ( int x=w-1;x>=0;x-- ) {
        if ( !vLineClear(x) ) {
        Right = x;
        break;
        }
    }
     
     //System.out.println("T="+Top+"\nB"+Bottom+"\nL"+Left+"\nR"+Right+"\nH="+h+"\nW="+w);
    
   }    
    
    
    public static Image scale_img(BufferedImage br,int width,int height)
    {   
        Image scaled=br.getScaledInstance(width, height, BufferedImage.SCALE_SMOOTH);
        
        return(scaled);
    }
    
    
    public BufferedImage[] getScaledImg()
    {   
        BufferedImage[] scaledImg=new BufferedImage[images.length];
        for(int i=0;i<images.length;i++)
        {
            w=images[i].getWidth();
            h=images[i].getHeight();
            pixelMap=new int[w*h];
            getPixels(i);
            findBounds();
            BufferedImage sub = images[i].getSubimage(Left,Top,(Right-Left)+1,(Bottom-Top)+1);
  
            img=scale_img(sub,20,20); // Scale height and width = 20
     
            scaledImg[i]=new BufferedImage(20, 20, BufferedImage.TYPE_INT_RGB);
            Graphics2D gr = scaledImg[i].createGraphics();
            gr.drawImage(img, 0, 0, null);
        }
        return scaledImg; 
    } 
}
